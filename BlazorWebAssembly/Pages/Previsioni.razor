@page "/previsioni"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@inject StateMenagement StateMenagement
@inject IJSRuntime JsRuntime

<PageTitle>Previsioni</PageTitle>

<h1><i class="bi bi-crop"></i> Previsioni di Spesa</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (previsioneTotaleListaOUT.Status == null)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {

            <div class="col-md-6">
                <div class="alert alert-primary" role="alert">
                    <div class="box-body">
                        <p>Num. Spese previste trovate:<b>@numattivita</b>&nbsp;&nbsp;&nbsp;Totale Spese previste: <b>@totale &euro;</b></p>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="box-body">
                    <div class="alert alert-warning" role="alert">
                        <b>Nuova Previsione di spesa</b>
                        <EditForm Model="@modelPre" OnValidSubmit="OnValidSubmitPre">
                            <DataAnnotationsValidator />
                            <ValidationMessage For="@(() => modelPre.Giorno)"></ValidationMessage>
                            <ValidationMessage For="@(() => modelPre.Descrizione)"></ValidationMessage>
                            <ValidationMessage For="@(() => modelPre.Costo)"></ValidationMessage>

                            <div class="row">
                                <div class="col-md-3">
                                    <label>
                                        Periodo:
                                        <InputSelect id="department" @bind-Value="modelPre.RifPeriodo" class="form-select" aria-label="Default select example">
                                            <option value="0">Periodo...</option>
                                            @foreach (var dept in listaperiodiOUT.Periodo)
                                            {
                                                <option value="@dept.ID">@dept.Descrizione</option>
                                            }
                                        </InputSelect>
                                    </label>
                                </div>

                                <div class="col-md-2">
                                    <label>
                                        Giorno:
                                        <InputNumber @bind-Value="modelPre.Giorno" required class="form-control" style="width: 4em" Min="1" Max="@ultimogiornodelmese" />
                                    </label>
                                </div>

                                <div class="col-md-5">
                                    <label>
                                        Dettagli:
                                        <InputText @bind-Value="modelPre.Descrizione" class="form-control" />
                                    </label>
                                </div>

                                <div class="col-md-2">
                                    <label>
                                        Importo &euro;:
                                        <InputNumber @bind-Value="modelPre.Costo" required class="form-control" style="width: 6em" Min="1" />
                                    </label>
                                </div>

                                <div class="col-md-6">
                                    <label>
                                        Tipo Attivita:
                                        <InputSelect id="department" @bind-Value="modelPre.RifTipoAttivita" class="form-select" aria-label="Default select example">
                                            <option value="0">Seleziona una tipologia</option>
                                            @foreach (var dept in tipoattOUT.TipoAttivita)
                                            {
                                                <option value="@dept.ID">@dept.Tipo</option>
                                            }
                                        </InputSelect>
                                    </label>
                                </div>

                                <div class="col-md-3">
                                    <label>
                                        Auto:
                                        <InputSelect id="department" @bind-Value="modelPre.AddebitoAutomatico" class="form-select" aria-label="Default select example">
                                            <option value="0">NO</option>
                                            <option value="1">SI</option>
                                        </InputSelect>
                                    </label>
                                </div>

                                <div class="col-md-3">
                                    <label>
                                        <br>
                                        <button type="submit" value="Inserisci" class="btn btn-warning">Procedi</button>
                                    </label>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

            @if (genericOUT.StatusError != null && genericOUT.StatusError != "")
            {
                if (genericOUT.Status == "OK")
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-success" role="alert">
                                <p><b>@genericOUT.StatusError</b>&nbsp;&nbsp;<button type="button" class="btn btn-outline-success btn-sm" @onclick="(e => refreshdel())"><i class="bi bi-x-lg"></i></button></p>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-danger" role="alert">
                                <p><b>@genericOUT.StatusError</b>&nbsp;&nbsp;<button type="button" class="btn btn-outline-danger btn-sm" @onclick="(e => refreshdel())"><i class="bi bi-x-lg"></i></button></p>
                            </div>
                        </div>
                    </div>
                }
            }
            <hr />
            @if (previsioneTotaleListaOUT.StatusError != null && previsioneTotaleListaOUT.StatusError != "")
            {
                <div class="col-md-12">
                    <div class="alert alert-warning" role="alert">
                        <p><b>@previsioneTotaleListaOUT.StatusError</b></p>
                    </div>
                </div>
            }

            @if (previsioneTotaleListaOUT.Previsione != null)
            {
                <div class="col-md-8">
                    <div class="box-body">
                        <table class="table table-striped">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Giorno</th>
                                    <th>Periodo</th>
                                    <th>Descrizione</th>
                                    <th>Tipo Costo</th>
                                    <th>Costo</th>
                                    <th>Addebito Automatico</th>
                                    <th>Azione</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var previsione in previsioneTotaleListaOUT.Previsione)
                                {
                                    <tr>
                                        <td>@previsione.Giorno.ToString()</td>
                                        <td>@previsione.DescrizionePeriodo.ToString()</td>
                                        <td>@previsione.Descrizione.ToString()</td>
                                        <td><b><font color="@previsione.ColoreHTML.ToString()">@previsione.TipoAttivita.ToString()</font></b></td>
                                        <td>@Math.Round((decimal)@previsione.Costo, 0)&nbsp;&euro;</td>
                                        @if (Convert.ToInt32(previsione.AddebitoAutomatico) == 1)
                                        {
                                            <td>SI</td>
                                        }else
                                        {
                                            <td>NO</td>
                                        }                                        
                                        <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => deletePrev(previsione.ID))"><i class="bi bi-x-lg"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <br />
                    </div>
                </div>
                <br />
            }
            else
            {
                <div class="col-md-12">
                    <div class="alert alert-primary" role="alert">
                        <p><b>Non sono presenti Previsioni di Spese future.</b></p>
                    </div>
                </div>
            }
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {

    private PrevisioneTotaleListaOUT previsioneTotaleListaOUT { get; set; } = new PrevisioneTotaleListaOUT();
    public HttpClient httpClient = new HttpClient();
    public decimal? totale { get; set; } = 0;
    public int? numattivita { get; set; } = 0;
    public GenericOUT genericOUT = new GenericOUT();

    public int? annoPre { get; set; } = 0;
    public int? mesePre { get; set; } = 0;
    private PrevisioneIN modelPre { get; set; } = new();
    public ListaPeriodiOUT listaperiodiOUT = new ListaPeriodiOUT();
    public TipoAttivitaOUT tipoattOUT = new TipoAttivitaOUT();

    public int ultimogiornodelmese { get; set; } = 0;
    public int? anno { get; set; } = 0;
    public int? mese { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            anno = Int32.Parse(DateTime.Now.ToString("yyyy"));
            mese = Int32.Parse(DateTime.Now.ToString("MM"));

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Previsioni/ListaTotale");
            response = StateMenagement.JsonNormalized(response);
            previsioneTotaleListaOUT = System.Text.Json.JsonSerializer.Deserialize<PrevisioneTotaleListaOUT>(response);
            totale = previsioneTotaleListaOUT.Previsione.Sum(item => Convert.ToInt32(item.Costo));
            numattivita = previsioneTotaleListaOUT.Previsione.Count();

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Previsioni/ListaPeriodi");
            response = StateMenagement.JsonNormalized(response);
            listaperiodiOUT = System.Text.Json.JsonSerializer.Deserialize<ListaPeriodiOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/TipoAttivitaList");
            response = StateMenagement.JsonNormalized(response);
            tipoattOUT = System.Text.Json.JsonSerializer.Deserialize<TipoAttivitaOUT>(response);

            modelPre.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));

            ultimogiornodelmese = DateTime.DaysInMonth(Convert.ToInt32(anno), Convert.ToInt32(mese));

        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    private async Task deletePrev(int id)
    {
        //DEBUG
        //Console.WriteLine("id:" + id.ToString());
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Vuoi eliminare la voce?");
        if (confirmed)
        {
            try
            {
                httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
                var response = await httpClient.DeleteAsync(StateMenagement.api_url + "/api/Previsioni/Delete/" + id);

                if (response.IsSuccessStatusCode)
                {
                    HttpResponseMessage resp = response;
                    string res = await resp.Content.ReadAsStringAsync();
                    var responseJS = StateMenagement.JsonNormalized(res);

                    genericOUT = System.Text.Json.JsonSerializer.Deserialize<GenericOUT>(responseJS);

                    if (genericOUT.Status == "OK")
                    {
                        genericOUT.StatusError = "Cancellazione Previsione di spesa eseguita correttamente";
                    }

                    await OnInitializedAsync();
                }
                else
                {
                    Navigation.NavigateTo("/errore?errdesc=Si è verificato un errore nella cancellazione della Previsione di spesa");
                }
            }
            catch (Exception e)
            {
                Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
            }
        }
    }

    private async Task refreshdel()
    {
        genericOUT.Status = null;
        genericOUT.StatusError = null;
        await OnInitializedAsync();
    }

    private async Task OnValidSubmitPre()
    {

        // DEBUG
        /*
        Console.WriteLine("Giorno:" + modelPre.Giorno);
        Console.WriteLine("RifPeriodo:" + modelPre.RifPeriodo);
        Console.WriteLine("Descrizione:" + modelPre.Descrizione);
        Console.WriteLine("Costo:" + modelPre.Costo);
        */

        if (modelPre.RifPeriodo == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Riferimento Periodo Assente!";
            return;
        }

        if (modelPre.RifTipoAttivita == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Riferimento Tipo Attivita Assente!";
            return;
        }

        if (modelPre.Descrizione == "")
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Descrizione Previsione Assente!";
            return;
        }

        if (modelPre.Costo == 0 || modelPre.Giorno == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Dati Mancanti!";
            return;
        }

        try
        {

            var json = System.Text.Json.JsonSerializer.Serialize(modelPre);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            httpClient.DefaultRequestHeaders.Accept.Clear();
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");

            var response = await httpClient.PostAsync(StateMenagement.api_url + "/api/Previsioni/New", content);

            if (response.IsSuccessStatusCode)
            {
                HttpResponseMessage resp = response;
                string res = await resp.Content.ReadAsStringAsync();
                var responseJS = StateMenagement.JsonNormalized(res);

                genericOUT = System.Text.Json.JsonSerializer.Deserialize<GenericOUT>(responseJS);

                if (genericOUT.Status == "OK")
                {
                    genericOUT.StatusError = "Nuova spesa prevista inserita correttamente";

                    modelPre.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));
                    modelPre.RifPeriodo = 0;
                    modelPre.Descrizione = "";
                    modelPre.Costo = 0;
                    modelPre.AddebitoAutomatico = 0;
                    modelPre.RifTipoAttivita = 0;
                }

                await OnInitializedAsync();
            }
            else
            {
                Navigation.NavigateTo("/errore?errdesc=Si è verificato un errore nell'inserimento della nuova previsione");
            }
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }

    }

}
