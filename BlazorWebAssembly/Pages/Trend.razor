@page "/trend/{step:int?}"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart

<PageTitle>Trend</PageTitle>

<h1><i class="bi bi-graph-up"></i> Trend</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (step != null)
        {
            @if (trendOUT.StatusError == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="col-md-12">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <p>Trend relativo all'intervallo indicato: <b>@descrizione</b>&nbsp;&nbsp;&nbsp;&nbsp;Bilancio del periodo:<b>@totale</b> &euro;</p>
                            <p>
                                Seleziona il periodo:
                                <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(10000))">Da sempre</button>
                                &nbsp;&nbsp;&nbsp;
                                <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(12))">Ultimo anno</button>
                                &nbsp;&nbsp;&nbsp;
                                <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(24))">Ultimi due anni</button>
                                &nbsp;&nbsp;&nbsp;
                                <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(36))">Ultimi tre anni</button>
                            </p>
                        </div>
                    </div>
                </div>
                <hr />
                @if (trendOUT.StatusError != null && trendOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@trendOUT.StatusError</b></p>
                        </div>
                    </div>
                }

                @if (trendOUT.Trend != null)
                {
                    <div class="col-md-7">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Mese</th>
                                        <th>Valore &euro;</th>
                                        <th>Esito</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var trend in trendOUT.Trend)
                                    {
                                        i = i + 1;
                                        _config.Data.Labels.Add(trend.Descrizione);
                                        <tr>
                                            <td>@trend.Descrizione</td>
                                            @if ((decimal)trend.Bilancio < 0)
                                            {
                                                <td><font color="red">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                            }
                                            @if ((decimal)trend.Bilancio < 0)
                                            {
                                                <td><font color="red"><i class="bi bi-calendar-minus"></i></font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green"><i class="bi bi-calendar-plus"></i></font></td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="box-body">
                            <Chart Config="_config" Width="25" Height="25"></Chart>
                        </div>
                    </div>
                    <br />
                }
            }
        }
        else
        {
            <div class="col-md-12">
                <div class="box-body">
                    <div class="alert alert-primary" role="alert">
                        Seleziona il periodo:
                        <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(10000))">Da sempre</button>
                        &nbsp;&nbsp;&nbsp;
                        <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(12))">Ultimo anno</button>
                        &nbsp;&nbsp;&nbsp;
                        <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(24))">Ultimi due anni</button>
                        &nbsp;&nbsp;&nbsp;
                        <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(36))">Ultimi tre anni</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    [Parameter]
    public int? step { get; set; }

    public HttpClient httpClient = new HttpClient();

    private TrendOUT trendOUT { get; set; } = new TrendOUT();

    public decimal? totale { get; set; } = 0;
    public string? descrizione { get; set; } = "";

    public BarConfig _config;
    public BarDataset<int> dataset = new BarDataset<int>();

    public int i { get; set; }

    bool showchart = false;

    private int[]? chart_asseyvalues = { };
    private string[]? chart_asseycolor = { };

    //OnAfterRenderAsync

    protected override void OnInitialized()
    {     
        if (trendOUT.Trend != null)
        {
            showchart = true;
        }

        _config = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Grafico Trend"
                    }
                }
            };

        /*
        foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        {
            _config.Data.Labels.Add(color);
        }
        */


        BarDataset<int> dataset = new BarDataset<int>(new[] { 6, 5, 3, 7 })
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
            }
        };

        _config.Data.Datasets.Add(dataset);
    }

    private async Task All(int numrecord)
    {
        step = numrecord;

        if (numrecord >= 10000)
        {
            descrizione = "da sempre";
        }
        if (numrecord >= 12)
        {
            descrizione = "ultimo anno";
        }
        if (numrecord >= 24)
        {
            descrizione = "ultimi due anni";
        }
        if (numrecord >= 36)
        {
            descrizione = "ultimi tre anni";
        }

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync("http://api.admincoreblazor.it/api/Trend/" + step);
            response = JsonNormalized(response);

            trendOUT = System.Text.Json.JsonSerializer.Deserialize<TrendOUT>(response);
            totale = 0;
            totale = trendOUT.Trend.Sum(item => Convert.ToInt32(item.Bilancio));
            chart_asseyvalues = trendOUT.Trend.Select(item => Convert.ToInt32((item.Bilancio))).ToArray();

            //Navigation.NavigateTo("/trend"); ???
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    public string JsonNormalized(string json)
    {
        json = json.ToString().Replace("\\u0022", "\"");
        json = json.ToString().Replace("\"{", "{");
        json = json.ToString().Replace("}\"", "}");

        return json;
    }


}
