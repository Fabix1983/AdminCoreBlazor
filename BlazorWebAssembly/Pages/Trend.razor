@page "/trend/{step:int?}"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart
@inject StateMenagement StateMenagement

<PageTitle>Trend</PageTitle>

<h1><i class="bi bi-clipboard-data-fill"></i> Trend</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (step != null)
        {
            @if (trendOUT.StatusError == null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="col-md-12">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <p>Trend relativo all'intervallo indicato: <b>@descrizione</b>&nbsp;&nbsp;&nbsp;&nbsp;Bilancio del periodo:<b>@totale</b> &euro;
                            @if (totale > 0)
                            {
                                <font color="green"><i class="bi bi-arrow-up-circle-fill"></i></font>
                            }
                            else
                            {
                                <font color="red"><i class="bi bi-arrow-down-circle-fill"></i></font>
                            }
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="box-body text-center">
                        <div class="alert alert-primary" role="alert">
                            Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(10000))">Da sempre</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="box-body text-center">
                        <div class="alert alert-primary" role="alert">
                            Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(12))">Ultimo anno</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="box-body text-center">
                        <div class="alert alert-primary" role="alert">
                            Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(24))">Ultimi due anni</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="box-body text-center">
                        <div class="alert alert-primary" role="alert">
                            Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(36))">Ultimi tre anni</button>
                        </div>
                    </div>
                </div>
                <hr />
                @if (trendOUT.StatusError != null && trendOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@trendOUT.StatusError</b></p>
                        </div>
                    </div>
                }

                @if (trendOUT.Trend != null)
                {
                    <div class="col-md-4">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Mese</th>
                                        <th>Valore &euro;</th>
                                        <th>Esito</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        _config.Data.Labels.Clear();
                                        _config.Data.Datasets.Clear();
                                        dataset.Clear();
                                        i = 0;
                                    }
                                    @foreach (var trend in trendOUT.Trend)
                                    {                                        
                                        _config.Data.Labels.Add(trend.Descrizione);
                                        dataset.Add(Convert.ToInt32(trend.Bilancio));                                      
                                        <tr>
                                            <td>@trend.Descrizione</td>
                                            @if ((decimal)trend.Bilancio < 0)
                                            {
                                                <td><font color="red">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                                chart_color_assey[i] = "ORANGERED";
                                                <td><font color="red"><i class="bi bi-calendar-minus"></i></font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                                chart_color_assey[i] = "YELLOWGREEN";
                                                <td><font color="green"><i class="bi bi-calendar-plus"></i></font></td>
                                            }
                                        </tr>
                                        i = i + 1;
                                    }
                                    @if (i > 1)
                                    {
                                        dataset.BackgroundColor = chart_color_assey;
                                        _config.Data.Datasets.Add(dataset);
                                    }                                   
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="box-body">
                            <Chart Config="_config"></Chart>
                        </div>
                    </div>
                    <br />
                }
            }
        }
        else
        {          
            <div class="col-md-3">
                <div class="box-body text-center">
                    <div class="alert alert-primary" role="alert">                     
                        Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(10000))">Da sempre</button>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="box-body text-center">
                    <div class="alert alert-primary" role="alert">
                        Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(12))">Ultimo anno</button>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="box-body text-center">
                    <div class="alert alert-primary" role="alert">
                        Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(24))">Ultimi due anni</button>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="box-body text-center">
                    <div class="alert alert-primary" role="alert">
                        Periodo: <button type="button" class="btn btn-primary width:20px; " @onclick="(e => All(36))">Ultimi tre anni</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    [Parameter]
    public int? step { get; set; }

    public HttpClient httpClient = new HttpClient();

    private TrendOUT trendOUT { get; set; } = new TrendOUT();

    public decimal? totale { get; set; } = 0;
    public string? descrizione { get; set; } = "";

    public BarConfig _config;

    public int i { get; set; } = 0;

    public BarDataset<int> dataset = new BarDataset<int>();
    public string[]? chart_color_assey = new string[10000];

    protected override void OnInitialized()
    {
        _config = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top,
                        Display = false
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Grafico Trend"
                    }
                }
            };
    }

    private async Task All(int numrecord)
    {
        step = numrecord;

        if (numrecord >= 10000)
        {
            descrizione = "da sempre";
        }
        if (numrecord >= 12)
        {
            descrizione = "ultimo anno";
        }
        if (numrecord >= 24)
        {
            descrizione = "ultimi due anni";
        }
        if (numrecord >= 36)
        {
            descrizione = "ultimi tre anni";
        }

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Trend/" + step);
            response = StateMenagement.JsonNormalized(response);

            trendOUT = System.Text.Json.JsonSerializer.Deserialize<TrendOUT>(response);
            totale = 0;
            totale = trendOUT.Trend.Sum(item => Convert.ToInt32(item.Bilancio));
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }
}
