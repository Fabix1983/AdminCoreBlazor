@page "/cerca"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http

<PageTitle>Cerca</PageTitle>

<h1><i class="bi bi-search"></i> Cerca</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (parola != null)
        {
            @if (cercaOUT.StatusError == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {          
                <div class="col-md-10">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <p>Hai cercato il seguente testo: <b>@parola</b></p>
                            <p>Num. Attività trovate:<b>@numattivita</b></p>
                            <p>
                                Totale: <b>@totale &euro;</b>&nbsp;&nbsp;
                                @if (totale > 0)
                                {
                                    <font color="green"><i class="bi bi-arrow-up-circle-fill"></i></font>
                                }
                                else
                                {
                                    <font color="red"><i class="bi bi-arrow-down-circle-fill"></i></font>
                                }
                            </p>

                        </div>
                    </div>
                </div>
                <div class="col-md-2 justify-content-center">
                    <div class="box-body">
                        <button type="button" class="btn btn-primary width:20px; " @onclick="NewSearch">Nuova Ricerca</button>
                    </div>
                </div>
                <hr />
                @if (cercaOUT.StatusError != null && cercaOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@cercaOUT.StatusError</b></p>
                        </div>
                    </div>      
                }

                @if (cercaOUT.Cerca != null)
                {
                    <div class="col-md-12">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Giorno</th>
                                        <th>Tipo</th>
                                        <th>Dettagli</th>
                                        <th>Costo</th>
                                        <th>Tipo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cerca in cercaOUT.Cerca)
                                    {
                                        <tr>
                                            <td>@cerca.DataSpesa.ToString().Replace("00:00:00", "")</td>
                                            <td><b><font color="@cerca.ColoreHTML.ToString()">@cerca.TipoAttivita.ToString()</font></b></td>
                                            <td>@cerca.Dettagli.ToString()</td>
                                            <td>@Math.Round((decimal)@cerca.Costo, 0)</td>
                                            @if ((decimal)cerca.Costo < 0)
                                            {
                                                <td><font color="red"><i class="bi bi-arrow-down-circle-fill"></i></font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green"><i class="bi bi-arrow-up-circle-fill"></i></font></td>
                                            }
                                        </tr>
                                    }                           
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <br/>              
                }
            }
        }
        else
        {
            <div class="col-md-12">
                <div class="box-body">
                    <div class="alert alert-primary" role="alert">
                        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                            <DataAnnotationsValidator />
                            Testo da cercare:
                            <InputText id="name" @bind-Value="model.parola" required />
                            <ValidationMessage For="@(() => model.parola)"></ValidationMessage>
                            <button type="submit" value="Cerca" class="btn btn-primary">Cerca</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    public class CercaIN
    {
        [Required(ErrorMessage = "Testo da cercare obbligatorio!")]
        public string? parola { get; set; }
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? parola { get; set; }

    private CercaIN model { get; set; } = new();

    private CercaOUT cercaOUT { get; set; } = new CercaOUT();

    public HttpClient httpClient = new HttpClient();

    public decimal? totale { get; set; } = 0;
    public int? numattivita { get; set; } = 0;

    private async Task OnValidSubmit()
    {
        parola = model.parola;

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync("http://api.admincoreblazor.it/api/Cerca/" + parola);
            response = JsonNormalized(response);

            cercaOUT = System.Text.Json.JsonSerializer.Deserialize<CercaOUT>(response);
            totale = 0;
            numattivita = 0;
            totale = cercaOUT.Cerca.Sum(item => Convert.ToInt32(item.Costo));
            numattivita = cercaOUT.Cerca.Count();

            // DEBUG
            //parola = response;
        }
        catch (Exception e)
        {
            parola = e.ToString();
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }   

    public string JsonNormalized(string json)
    {
        json = json.ToString().Replace("\\u0022", "\"");
        json = json.ToString().Replace("\"{", "{");
        json = json.ToString().Replace("}\"", "}");

        return json;
    }

    private void NewSearch()
    {
        parola = null;
        model.parola = null;
        totale = 0;
        numattivita = 0;
        Navigation.NavigateTo("/cerca");
    }
}

