@page "/home/{anno:int?}/{mese:int?}"
@page "/"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.PieChart
@inject StateMenagement StateMenagement

<PageTitle>Home</PageTitle>

<h1><i class="bi bi-house-gear"></i> Home</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (attivitaOUT.StatusError != "Nessuna attivita trovata.")
        {
            @if (attivitaOUT.Status == null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="col-md-6">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <h2>
                                <b>@periodoOUT.Descrizione</b>&nbsp;
                                @if (bilancio <= 0)
                                {
                                    <div class="spinner-grow text-danger" role="status">
                                        <span class="visually-hidden"></span>
                                    </div>
                                }
                                else
                                {
                                    <div class="spinner-grow text-success" role="status">
                                        <span class="visually-hidden"></span>
                                    </div>
                                }
                            </h2>
                            <p>
                                Bilancio: <b>@bilancio &euro;</b> Totale Spese: <b>@totspese &euro;</b> Totale entrate: <b>@totentrate &euro;</b>
                            </p>
                            @{
                                DateTime now = DateTime.Now;
                                var startDate = new DateTime(now.Year, now.Month, 1);
                                var endDate = startDate.AddMonths(1).AddDays(-1);
                                String Dato;
                                Dato = Math.Round( (Convert.ToDecimal(now.Day) / Convert.ToDecimal(endDate.Day) ) * 100, 0).ToString();
                            }
                            @if (descrizionedelmese == "mese in corso")
                            {
                                <p class="col-md-8">
                                    Giorno <b>@now.Day</b> di <b>@endDate.Day</b>
                                    <div class="box-body no-padding">
                                        <div class="progress" role="progressbar" aria-label="Animated striped example 20px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 20px">
                                            <div class="progress-bar progress-bar-striped bg-success progress-bar-animated" style="width: @Dato%">@Dato%</div>
                                        </div>
                                    </div>
                                </p>
                            }
                            else
                            {
                                <p><b>@descrizionedelmese</b></p>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="box-body">
                        <div class="alert alert-primary" role="alert">
                           
                        </div>
                    </div>
                </div>
                <hr />
                @if (attivitaOUT.StatusError != null && attivitaOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@attivitaOUT.StatusError</b></p>
                        </div>
                    </div>
                }

                @if (attivitaOUT.Attivita != null)
                {
                    <div class="col-md-5">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Giorno</th>
                                        <th>Tipologia</th>
                                        <th>Dettagli</th>
                                        <th>Valore &euro;</th>
                                        <th>Totale &euro;</th>
                                        <th>Azioni</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        totaleincrementale = 0;
                                        i = 0;
                                    }
                                    @foreach (var att in attivitaOUT.Attivita)
                                    {
                                        totaleincrementale = totaleincrementale + Math.Round((decimal)att.Costo, 0);
                                        <tr>
                                            <td>@att.Giorno</td>
                                            <td><b><font color="@att.ColoreHTML.ToString()">@att.TipoAttivita.ToString()</font></b></td>
                                            <td>@att.Dettagli</td>
                                            @if (Math.Round((decimal)att.Costo, 0) < 0)
                                            {
                                                <td><font color="red">@Math.Round((decimal)att.Costo, 0)</font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green">@Math.Round((decimal)att.Costo, 0)</font></td>
                                            }
                                            <td>@totaleincrementale</td>
                                            <td></td>
                                        </tr>
                                        i = i + 1;
                                    }
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="box-body">
                            
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="box-body">
                        </div>
                    </div>
                    <br />
                }
            }
        }
        else
        {
            @if (tipoattOUT.Status == "OK")
            {
                <div class="col-md-12">
                    <div class="box-body">
                        <div class="alert alert-danger" role="alert">
                            <p>Attenzione: Periodo senza alacuna attività</p> 
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    [Parameter]
    public int? anno { get; set; } = 0;
    [Parameter]
    public int? mese { get; set; } = 0;

    public int i { get; set; } = 0;

    public HttpClient httpClient = new HttpClient();
    public TipoAttivitaOUT tipoattOUT = new TipoAttivitaOUT();
    public PeriodoOUT periodoOUT = new PeriodoOUT();
    public AttivitaOUT attivitaOUT = new AttivitaOUT();
    public AggregatoAttivitaOUT aggregatoAttivitaOUT = new AggregatoAttivitaOUT();

    public int? annoNext { get; set; } = 0;
    public int? meseNext { get; set; } = 0;

    public int? annoPre { get; set; } = 0;
    public int? mesePre { get; set; } = 0;

    public string? descrizionedelmese = "";

    private AttivitaIN model { get; set; } = new();

    public decimal? totspese { get; set; } = 0;
    public decimal? totentrate { get; set; } = 0;
    public decimal? bilancio { get; set; } = 0;
    public string? periodo { get; set; } = "";

    public decimal totaleincrementale { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (anno is null)
        {
            anno = Int32.Parse(DateTime.Now.ToString("yyyy"));
        }

        if (mese is null)
        {
            mese = Int32.Parse(DateTime.Now.ToString("MM"));
        }

        if (mese == 1)
        {
            annoPre = 12;
            mesePre = anno - 1;
        }
        else
        {
            mesePre = mese - 1;
            annoPre = anno;
        }

        if (mese == 12)
        { 
            meseNext = 1;
            annoNext = anno + 1;
        }
        else
        {
            meseNext = mese + 1;
            annoNext = anno;
        }

        if (anno == Int32.Parse(DateTime.Now.ToString("yyyy")) && mese == Int32.Parse(DateTime.Now.ToString("MM")))
        {
            descrizionedelmese = "mese in corso";
        }
        else
        {
            descrizionedelmese = "mese concluso";
        }

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/TipoAttivitaList");
            response = StateMenagement.JsonNormalized(response);

            tipoattOUT = System.Text.Json.JsonSerializer.Deserialize<TipoAttivitaOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/Periodo/" + anno + "/" + mese + "");
            response = StateMenagement.JsonNormalized(response);

            periodoOUT = System.Text.Json.JsonSerializer.Deserialize<PeriodoOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/Attivita/" + anno + "/" + mese + "/none/none");
            response = StateMenagement.JsonNormalized(response);

            attivitaOUT = System.Text.Json.JsonSerializer.Deserialize<AttivitaOUT>(response);

            totspese = attivitaOUT.Attivita.Where(item => Convert.ToInt32(item.Costo) <= 0).Sum(item => Convert.ToInt32(item.Costo));
            totentrate = attivitaOUT.Attivita.Where(item => Convert.ToInt32(item.Costo) > 0).Sum(item => Convert.ToInt32(item.Costo));
            bilancio = attivitaOUT.Attivita.Sum(item => Convert.ToInt32(item.Costo));

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/AttivitaAggregate/" + anno + "/" + mese + "");
            response = StateMenagement.JsonNormalized(response);

            aggregatoAttivitaOUT = System.Text.Json.JsonSerializer.Deserialize<AggregatoAttivitaOUT>(response);
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }
}