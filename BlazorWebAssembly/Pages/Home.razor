@page "/home/{anno:int?}/{mese:int?}"
@page "/"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.PieChart
@inject StateMenagement StateMenagement

<PageTitle>Home</PageTitle>

<h1><i class="bi bi-house-gear"></i> Home</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (attivitaOUT.StatusError != "Nessuna attivita trovata." || descrizionedelmese == "Mese in corso")
        {
            @if (attivitaOUT.Status == null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="col-md-4">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <h2>
                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => previous())"><i class="bi bi-arrow-left"></i></button>
                                <b>@periodoOUT.Descrizione</b>
                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => next())"><i class="bi bi-arrow-right"></i></button>
                            </h2>
                            <p>
                                <h4>Bilancio:
                                @if (bilancio <= 0)
                                {
                                    <font color="red"><b>@bilancio &euro;</b></font>
                                }
                                else
                                {
                                    <font color="green"><b>@bilancio &euro;</b></font>
                                }
                                </h4>
                                <i class="bi bi-arrow-down-circle"></i>&nbsp; Totale Spese: <b>@totspese &euro;</b> &nbsp;&nbsp;<i class="bi bi-arrow-up-circle"></i>&nbsp; Totale entrate: <b>@totentrate &euro;</b>
                            </p>
                            @{
                                DateTime now = DateTime.Now;
                                var startDate = new DateTime(now.Year, now.Month, 1);
                                var endDate = startDate.AddMonths(1).AddDays(-1);
                                String Dato;
                                Dato = Math.Round( (Convert.ToDecimal(now.Day) / Convert.ToDecimal(endDate.Day) ) * 100, 0).ToString();
                            }
                            @if (descrizionedelmese == "Mese in corso")
                            {
                                <p class="col-md-8">
                                    Giorno <b>@now.Day</b> di <b>@endDate.Day</b>
                                    <div class="box-body no-padding">
                                        <div class="progress" role="progressbar" aria-label="Animated striped example 20px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 20px">
                                            <div class="progress-bar progress-bar-striped bg-success progress-bar-animated" style="width: @Dato%">@Dato%</div>
                                        </div>
                                    </div>
                                </p>
                            }
                            else
                            {
                                <p><b>@descrizionedelmese</b></p>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="box-body">
                        <div class="alert alert-dark" role="alert">
                            <b>Nuova Attività</b>
                            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationMessage For="@(() => model.Giorno)"></ValidationMessage>
                                <ValidationMessage For="@(() => model.Costo)"></ValidationMessage>
                                <ValidationMessage For="@(() => model.Dettagli)"></ValidationMessage>
                                <div class="row">
                                    <div class="col-md-3">
                                        <label>
                                            Giorno:
                                            <InputNumber @bind-Value="model.Giorno" required class="form-control" style="width: 4em" Min="1" Max="@ultimogiornodelmese" />                                           
                                        </label>
                                    </div>

                                    <div class="col-md-6">
                                        <label>
                                            Tipo Attivita:
                                            <InputSelect id="department" @bind-Value="model.RifTipoAttivita" class="form-select" aria-label="Default select example">
                                                <option value="0">Seleziona una tipologia</option>
                                                @foreach (var dept in tipoattOUT.TipoAttivita)
                                                {
                                                    <option value="@dept.ID">@dept.Tipo</option>
                                                }
                                            </InputSelect>
                                        </label>
                                    </div>

                                    <div class="col-md-3">
                                        <label>
                                            Importo &euro;:
                                            <InputNumber @bind-Value="model.Costo" required class="form-control" style="width: 6em" Min="1" />                                        
                                        </label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-8">
                                        <label>
                                            Dettagli:
                                            <InputText @bind-Value="model.Dettagli" class="form-control" />
                                        </label>
                                    </div>

                                    <div class="col-md-4">
                                        <label>
                                            <br>
                                            <button type="submit" value="Inserisci" class="btn btn-success">Procedi</button>
                                        </label>                                       
                                    </div>
                                </div>
                                
                            </EditForm>
                        </div>
                    </div>
                </div>

                <div class="col-md-4">
                    <div class="box-body">
                        <div class="alert alert-warning" role="alert">
                            <b>Previsione di spesa</b>
                            <EditForm Model="@modelPre" OnValidSubmit="OnValidSubmitPre">
                                <DataAnnotationsValidator />
                                <ValidationMessage For="@(() => modelPre.Giorno)"></ValidationMessage>
                                <ValidationMessage For="@(() => modelPre.Descrizione)"></ValidationMessage>
                                <ValidationMessage For="@(() => modelPre.Costo)"></ValidationMessage>
                                <div class="row">
                                    <div class="col-md-2">
                                        <label>
                                            Giorno:
                                            <InputNumber @bind-Value="modelPre.Giorno" required class="form-control" style="width: 4em" Min="1" Max="@ultimogiornodelmese" />
                                        </label>
                                    </div>

                                    <div class="col-md-6">
                                        <label>
                                            Dettagli:
                                            <InputText @bind-Value="modelPre.Descrizione" class="form-control" />
                                        </label>
                                    </div>

                                    <div class="col-md-4">
                                        <label>
                                            Importo &euro;:
                                            <InputNumber @bind-Value="modelPre.Costo" required class="form-control" style="width: 6em" Min="1" />
                                        </label>
                                    </div>

                                    <div class="col-md-4">
                                        <label>
                                            <br>
                                            <button type="submit" value="Inserisci" class="btn btn-success">Procedi</button>
                                        </label>
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>

                @if (attivitaOUT.StatusError != null && attivitaOUT.StatusError != "")
                {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="alert alert-info" role="alert">
                                <p><b>@attivitaOUT.StatusError</b>&nbsp;&nbsp;<button type="button" class="btn btn-outline-secondary btn-sm" @onclick="(e => refresh())"><i class="bi bi-x-lg"></i></button></p>
                            </div>
                        </div>
                    </div>
                }
                @if (genericOUT.StatusError != null && genericOUT.StatusError != "")
                {
                    if (genericOUT.Status == "OK")
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="alert alert-success" role="alert">
                                    <p><b>@genericOUT.StatusError</b>&nbsp;&nbsp;<button type="button" class="btn btn-outline-success btn-sm" @onclick="(e => refreshdel())"><i class="bi bi-x-lg"></i></button></p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <div class="alert alert-danger" role="alert">
                                    <p><b>@genericOUT.StatusError</b>&nbsp;&nbsp;<button type="button" class="btn btn-outline-danger btn-sm" @onclick="(e => refreshdel())"><i class="bi bi-x-lg"></i></button></p>
                                </div>
                            </div>
                        </div>
                    }
                }

                @if (attivitaOUT.Attivita != null)
                {
                    <div class="row">
                        <div class="col-md-4">
                            <div class="box-body">
                                <table class="table table-striped">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th>Giorno</th>
                                            <th>Tipologia</th>
                                            <th>Dettagli</th>
                                            <th>Valore</th>
                                            <th>Totale</th>
                                            <th><button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => order())"><i class="bi bi-triangle"></i></button></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            totaleincrementale = 0;
                                            i = 0;
                                        }
                                        @foreach (var att in attivitaOUT.Attivita)
                                        {
                                            totaleincrementale = totaleincrementale + Math.Round((decimal)att.Costo, 0);
                                            <tr>
                                                <td>@att.Giorno</td>
                                                <td><b><font color="@att.ColoreHTML.ToString()">@att.TipoAttivita.ToString()</font></b></td>
                                                <td>@att.Dettagli</td>
                                                @if (Math.Round((decimal)att.Costo, 0) < 0)
                                                {
                                                    <td><font color="red">@Math.Round((decimal)att.Costo, 0)</font></td>
                                                }
                                                else
                                                {
                                                    <td><font color="green">@Math.Round((decimal)att.Costo, 0)</font></td>
                                                }
                                                <td>@totaleincrementale</td>
                                                <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => delete(att.ID))"><i class="bi bi-x-lg"></i></button></td>
                                            </tr>
                                            i = i + 1;
                                        }
                                    </tbody>
                                </table>
                                <br />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="box-body">
                                <table class="table table-striped">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th>Tipologia</th>
                                            <th>Valore</th>
                                            <th>%</th>
                                            <th>Azioni</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            _configBar.Data.Labels.Clear();
                                            _configBar.Data.Datasets.Clear();
                                            _configPie.Data.Labels.Clear();
                                            _configPie.Data.Datasets.Clear();
                                            bardataset.Clear();
                                            piedataset.Clear();
                                            y = 0;
                                        }
                                        @foreach (var attagg in aggregatoAttivitaOUT.AggregatoAttivita)
                                        {
                                            <tr>
                                                <td><b><font color="@attagg.ColoreHTML.ToString()">@attagg.TipoAttivita.ToString()</font></b></td>
                                                @if (Math.Round((decimal)attagg.TotAtt, 0) < 0)
                                                {
                                                    <td><font color="red">@Math.Round((decimal)attagg.TotAtt, 0)</font></td>
                                                    if (totspese != 0)
                                                    {
                                                        _configBar.Data.Labels.Add(attagg.TipoAttivita.ToString());
                                                        _configPie.Data.Labels.Add(attagg.TipoAttivita.ToString());
                                                        bardataset.Add(Convert.ToInt32(attagg.TotAtt) * -1);
                                                        piedataset.Add(Convert.ToInt32(attagg.TotAtt) * -1);
                                                        chart_color_assey[y] = attagg.ColoreHTML.ToString();
                                                        <td>@Math.Round(Math.Round((decimal)attagg.TotAtt, 0) * 100 / Math.Round((decimal)totspese, 0), 2)</td>
                                                    }
                                                    else
                                                    {
                                                        <td></td>
                                                    }
                                                
                                                }
                                                else
                                                {
                                                    <td><font color="green">@Math.Round((decimal)attagg.TotAtt, 0)</font></td>
                                                    if (totentrate != 0)
                                                    {
                                                        <td>@Math.Round(Math.Round((decimal)attagg.TotAtt, 0) * 100 / Math.Round((decimal)totentrate, 0), 2)</td>
                                                    }
                                                    else
                                                    {
                                                        <td></td>
                                                    }                                           
                                                }
                                                <td><button type="button" class="btn btn-outline-primary btn-sm" @onclick="(e => filter(attagg.TipoAttivita.ToString()))"><i class="bi bi-search"></i></button></td>
                                            </tr>
                                            y = y + 1;
                                        }
                                        @if (y > 1)
                                        {
                                            bardataset.BackgroundColor = chart_color_assey;
                                            piedataset.BackgroundColor = chart_color_assey;
                                            _configBar.Data.Datasets.Add(bardataset);
                                            _configPie.Data.Datasets.Add(piedataset);
                                        }
                                    </tbody>
                                </table>
                                <br />
                                <Chart Config="_configPie"></Chart>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="box-body">
                                <Chart Config="_configBar"></Chart>                           
                            </div>
                        </div>
                        <br />
                    </div>
                }
            }
        }
        else
        {
            @if (tipoattOUT.Status == "OK")
            {
                <div class="row">
                    <div class="col-md-12">
                        <div class="box-body">
                            <div class="alert alert-danger" role="alert">
                                <p><button type="button" class="btn btn-outline-danger btn-sm" @onclick="(e => previous())"><i class="bi bi-arrow-left"></i></button> &nbsp; Attenzione: Periodo senza alcuna attività</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    [Parameter]
    public int? anno { get; set; } = 0;

    [Parameter]
    public int? mese { get; set; } = 0;

    public string? filtro { get; set; } = "";
    public string? ordinamento { get; set; } = "";

    public int i { get; set; } = 0;
    public int y { get; set; } = 0;

    public HttpClient httpClient = new HttpClient();
    public TipoAttivitaOUT tipoattOUT = new TipoAttivitaOUT();
    public PeriodoOUT periodoOUT = new PeriodoOUT();
    public AttivitaOUT attivitaOUT = new AttivitaOUT();
    public AggregatoAttivitaOUT aggregatoAttivitaOUT = new AggregatoAttivitaOUT();
    public GenericOUT genericOUT = new GenericOUT();
    public PrevisioneOUT previsioneOUT = new PrevisioneOUT();

    public int? annoNext { get; set; } = 0;
    public int? meseNext { get; set; } = 0;

    public int? annoPre { get; set; } = 0;
    public int? mesePre { get; set; } = 0;

    public string? descrizionedelmese = "";

    [SupplyParameterFromForm]
    private AttivitaIN model { get; set; } = new();

    private PrevisioneIN modelPre { get; set; } = new();

    public decimal? totspese { get; set; } = 0;
    public decimal? totentrate { get; set; } = 0;
    public decimal? bilancio { get; set; } = 0;
    public string? periodo { get; set; } = "";

    public decimal totaleincrementale { get; set; } = 0;

    public BarConfig _configBar;
    private PieConfig _configPie;

    public BarDataset<int> bardataset = new BarDataset<int>();
    public PieDataset<int> piedataset = new PieDataset<int>();
    public string[]? chart_color_assey = new string[10000];

    public int ultimogiornodelmese { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await DataCharge("","");

        model.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));
        modelPre.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));

        _configBar = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top,
                        Display = false
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Grafico Aggregati"
                    }
                }
            };

        _configPie = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = false,
                        Text = "Grafico Aggregati"
                    },
                    Legend = new Legend
                    {
                        Position = Position.Bottom,
                        Display = true
                    },
                }
            };
    }

    private async Task DataCharge(string filter, string order)
    {

        if (anno is null)
        {
            anno = Int32.Parse(DateTime.Now.ToString("yyyy"));
        }

        if (mese is null)
        {
            mese = Int32.Parse(DateTime.Now.ToString("MM"));
        }

        if (mese == 1)
        {
            mesePre = 12;
            annoPre = anno - 1;
        }
        else
        {
            mesePre = mese - 1;
            annoPre = anno;
        }

        if (mese == 12)
        {
            meseNext = 1;
            annoNext = anno + 1;
        }
        else
        {
            meseNext = mese + 1;
            annoNext = anno;
        }

        ultimogiornodelmese = DateTime.DaysInMonth(Convert.ToInt32(anno), Convert.ToInt32(mese));

        if (anno == Int32.Parse(DateTime.Now.ToString("yyyy")) && mese == Int32.Parse(DateTime.Now.ToString("MM")))
        {
            descrizionedelmese = "Mese in corso";
        }
        else
        {
            descrizionedelmese = "Mese concluso";
        }

        if (filtro is null)
        {
            filtro = "";
        }

        if (filter != "")
        {
            filtro = filter;
            ordinamento = "none";
        }

        if (filter == "")
        {
            filtro = "none";
        }

        if (order == "")
        {
            ordinamento = "none";
        }

        if (order != "")
        {
            ordinamento = order;
            filtro = "none";
        }

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/TipoAttivitaList");
            response = StateMenagement.JsonNormalized(response);

            tipoattOUT = System.Text.Json.JsonSerializer.Deserialize<TipoAttivitaOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Previsioni/Lista/" + anno + "/" + mese + "");
            response = StateMenagement.JsonNormalized(response);

            previsioneOUT = System.Text.Json.JsonSerializer.Deserialize<PrevisioneOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/Periodo/" + anno + "/" + mese + "");
            response = StateMenagement.JsonNormalized(response);

            periodoOUT = System.Text.Json.JsonSerializer.Deserialize<PeriodoOUT>(response);

            model.RifPeriodo = periodoOUT.ID;
            modelPre.RifPeriodo = periodoOUT.ID;

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            if (filtro != "" || ordinamento != "")
            {
                response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/Attivita/" + anno + "/" + mese + "/" + filtro.ToString() + "/" + ordinamento);
            }
            else
            {
                response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/Attivita/" + anno + "/" + mese + "/none/none");
            }

            response = StateMenagement.JsonNormalized(response);

            attivitaOUT = System.Text.Json.JsonSerializer.Deserialize<AttivitaOUT>(response);

            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/AttivitaAggregate/" + anno + "/" + mese + "");
            response = StateMenagement.JsonNormalized(response);

            aggregatoAttivitaOUT = System.Text.Json.JsonSerializer.Deserialize<AggregatoAttivitaOUT>(response);

            totspese = aggregatoAttivitaOUT.AggregatoAttivita.Where(item => Convert.ToInt32(item.TotAtt) <= 0).Sum(item => Convert.ToInt32(item.TotAtt));
            totentrate = aggregatoAttivitaOUT.AggregatoAttivita.Where(item => Convert.ToInt32(item.TotAtt) > 0).Sum(item => Convert.ToInt32(item.TotAtt));
            bilancio = aggregatoAttivitaOUT.AggregatoAttivita.Sum(item => Convert.ToInt32(item.TotAtt));

        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    private async Task filter(string typefilter)
    {      
        await DataCharge(typefilter, "");
    }

    private async Task refresh()
    {
        await DataCharge("", "");
    }

    private async Task order()
    {
        await DataCharge("", "crescente");
    }

    private async Task previous()
    {
        anno = annoPre;
        mese = mesePre;
        await DataCharge("", "");
    }

    private async Task next()
    {
        anno = annoNext;
        mese = meseNext;
        await DataCharge("", "");
    }

    private async Task refreshdel()
    {
        genericOUT.Status = null;
        genericOUT.StatusError = null;
        await DataCharge("", "");
    }

    private async Task delete(int id)
    {
        //DEBUG
        //Console.WriteLine("id:" + id.ToString());

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.DeleteAsync(StateMenagement.api_url + "/api/Attivita/Delete/" + id);

            if (response.IsSuccessStatusCode)
            {
                HttpResponseMessage resp = response;
                string res = await resp.Content.ReadAsStringAsync();
                var responseJS = StateMenagement.JsonNormalized(res);

                genericOUT = System.Text.Json.JsonSerializer.Deserialize<GenericOUT>(responseJS);

                if (genericOUT.Status == "OK")
                {
                    genericOUT.StatusError = "Cancellazione Attività eseguita correttamente";
                }

                await DataCharge("", "");
            }
            else
            {
                Navigation.NavigateTo("/errore?errdesc=Si è verificato un errore nella cancellazione dell'attività");
            }
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    private async Task OnValidSubmit()
    {

        // DEBUG
        /*
        Console.WriteLine("Giorno:" + model.Giorno);
        Console.WriteLine("RifPeriodo:" + model.RifPeriodo);
        Console.WriteLine("RifTipoAttivita:" + model.RifTipoAttivita);
        Console.WriteLine("Dettagli:" + model.Dettagli);
        Console.WriteLine("Costo:" + model.Costo);
        */

        if (model.RifTipoAttivita == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Tipo di attivita non indicata!";
            return;
        }

        try
        {

            var json = System.Text.Json.JsonSerializer.Serialize(model);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            httpClient.DefaultRequestHeaders.Accept.Clear();
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");

            var response = await httpClient.PostAsync(StateMenagement.api_url + "/api/Attivita/AttivitaNew", content);

            if (response.IsSuccessStatusCode)
            {
                HttpResponseMessage resp = response;
                string res = await resp.Content.ReadAsStringAsync();
                var responseJS = StateMenagement.JsonNormalized(res);

                genericOUT = System.Text.Json.JsonSerializer.Deserialize<GenericOUT>(responseJS);

                if (genericOUT.Status == "OK")
                {
                    genericOUT.StatusError = "Nuova attività inserita correttamente";

                    model.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));
                    model.RifPeriodo = periodoOUT.ID;
                    model.RifTipoAttivita = 0;
                    model.Dettagli = "";
                    model.Costo = 0;
                }

                await DataCharge("", "");
            }
            else
            {
                Navigation.NavigateTo("/errore?errdesc=Si è verificato un errore nell'inserimento della nuova attività");
            }
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }

    }

    private async Task OnValidSubmitPre()
    {

        // DEBUG
        /*
        Console.WriteLine("Giorno:" + modelPre.Giorno);
        Console.WriteLine("RifPeriodo:" + modelPre.RifPeriodo);
        Console.WriteLine("Descrizione:" + modelPre.Descrizione);
        Console.WriteLine("Costo:" + modelPre.Costo);
        */

        if (modelPre.RifPeriodo == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Riferimento Periodo Assente!";
            return;
        }

        if (modelPre.Descrizione == "")
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Descrizione Previsione Assente!";
            return;
        }

        if (modelPre.Costo == 0 || modelPre.Giorno == 0)
        {
            genericOUT.Status = "KO";
            genericOUT.StatusError = "ERRORE: Dati Mancanti!";
            return;
        }

        try
        {

            var json = System.Text.Json.JsonSerializer.Serialize(modelPre);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            httpClient.DefaultRequestHeaders.Accept.Clear();
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");

            var response = await httpClient.PostAsync(StateMenagement.api_url + "/api/Previsioni/New", content);

            if (response.IsSuccessStatusCode)
            {
                HttpResponseMessage resp = response;
                string res = await resp.Content.ReadAsStringAsync();
                var responseJS = StateMenagement.JsonNormalized(res);

                genericOUT = System.Text.Json.JsonSerializer.Deserialize<GenericOUT>(responseJS);

                if (genericOUT.Status == "OK")
                {
                    genericOUT.StatusError = "Nuova spesa prevista inserita correttamente";

                    model.Giorno = Convert.ToInt32(DateTime.Now.ToString("dd"));
                    model.RifPeriodo = periodoOUT.ID;
                    model.RifTipoAttivita = 0;
                    model.Dettagli = "";
                    model.Costo = 0;
                }

                await DataCharge("", "");
            }
            else
            {
                Navigation.NavigateTo("/errore?errdesc=Si è verificato un errore nell'inserimento della nuova previsione");
            }
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }

    }
}