@page "/categoria"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart

<PageTitle>Categoria</PageTitle>

<h1><i class="bi bi-card-list"></i> Trend</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (tipocategoria != null)
        {
            @if (categoriaOUT.StatusError == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="col-md-12">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <p>
                                Trend relativo all'intervallo indicato: <b>@descrizione</b>&nbsp;&nbsp;&nbsp;&nbsp;Bilancio del periodo:<b>@totale</b> &euro;
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="box-body">
                        <div class="alert alert-primary" role="alert">
                            <InputSelect id="department" @bind-Value="tipocategoria" @bind-Value:after="ValueChanged">
                                @foreach (var dept in tipoattOUT.TipoAttivita)
                                {
                                    <option value="@dept.ID">@dept.Tipo</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <hr />
                @if (categoriaOUT.StatusError != null && categoriaOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@categoriaOUT.StatusError</b></p>
                        </div>
                    </div>
                }

                @if (categoriaOUT.Categoria != null)
                {
                    <div class="col-md-4">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Mese</th>
                                        <th>Valore &euro;</th>
                                        <th>Valore Medio</th>
                                        <th>% sul Mese</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        _config.Data.Labels.Clear();
                                        _config.Data.Datasets.Clear();
                                    }
                                    @foreach (var categoria in categoriaOUT.Categoria)
                                    {
                                        _config.Data.Labels.Add(trend.Descrizione);
                                        dataset.Add(Convert.ToInt32(trend.Bilancio));
                                        <tr>
                                            <td>@trend.Descrizione</td>
                                            @if ((decimal)trend.Bilancio < 0)
                                            {
                                                <td><font color="red">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                                chart_color_assey[i] = "ORANGERED";
                                                <td><font color="red"><i class="bi bi-calendar-minus"></i></font></td>
                                            }
                                            else
                                            {
                                                <td><font color="green">@Math.Round((decimal)trend.Bilancio, 0)</font></td>
                                                chart_color_assey[i] = "YELLOWGREEN";
                                                <td><font color="green"><i class="bi bi-calendar-plus"></i></font></td>
                                            }
                                        </tr>
                                        i = i + 1;
                                    }
                                    @if (i > 1)
                                    {
                                        dataset.BackgroundColor = chart_color_assey;
                                        _config.Data.Datasets.Add(dataset);
                                    }
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="box-body">
                            <Chart Config="_config"></Chart>
                        </div>
                    </div>
                    <br />
                }
            }
        }
        else
        {
            <div class="col-md-12">
                <div class="box-body">
                    <div class="alert alert-primary" role="alert">
                        <InputSelect id="department" @bind-Value="tipocategoria" @bind-Value:after="ValueChanged">
                            @foreach (var dept in tipoattOUT.TipoAttivita)
                            {
                                <option value="@dept.ID">@dept.Tipo</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    public HttpClient httpClient = new HttpClient();

    private CategoriaOUT categoriaOUT { get; set; } = new CategoriaOUT();
    private TipoAttivitaOUT tipoattOUT { get; set; } = new TipoAttivitaOUT();

    public decimal? media { get; set; } = 0;
    public decimal? mediaperc { get; set; } = 0;
    public int? tipocategoria { get; set; } = 0;
    public string? descrizione { get; set; } = "";
    public string? descrizione_tipo { get; set; } = "";

    public BarConfig _config;

    public int i { get; set; } = 0;

    public BarDataset<int> dataset = new BarDataset<int>();
    public string[]? chart_color_assey = new string[10000];

    public class ShowIN
    {
        public int? rifcategoria { get; set; }
    }

    private ShowIN model { get; set; } = new();

    protected async override void OnInitialized()
    {
        _config = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Legend = new Legend
                    {
                        Position = Position.Top
                    },
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Grafico per Categoria"
                    }
                }
            };

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync("/api/Attivita/TipoAttivitaList");
            response = JsonNormalized(response);

            tipoattOUT = System.Text.Json.JsonSerializer.Deserialize<TipoAttivitaOUT>(response);
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    private async Task ValueChanged()
    {
        Console.WriteLine("tipocategoria: " + tipocategoria);
    }

    /*
    private async Task OnValueChanged()
    {
        parola = model.parola;

        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync("http://api.admincoreblazor.it/api/Cerca/" + parola);
            response = JsonNormalized(response);

            cercaOUT = System.Text.Json.JsonSerializer.Deserialize<CercaOUT>(response);
            totale = 0;
            numattivita = 0;
            totale = cercaOUT.Cerca.Sum(item => Convert.ToInt32(item.Costo));
            numattivita = cercaOUT.Cerca.Count();

            // DEBUG
            //parola = response;
        }
        catch (Exception e)
        {
            // DEBUG
            //parola = e.ToString();
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }
    */

    public string JsonNormalized(string json)
    {
        json = json.ToString().Replace("\\u0022", "\"");
        json = json.ToString().Replace("\"{", "{");
        json = json.ToString().Replace("}\"", "}");

        return json;
    }
}