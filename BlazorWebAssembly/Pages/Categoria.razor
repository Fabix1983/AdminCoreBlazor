@page "/categoria/{tipocategoria:int?}"
@using System.ComponentModel.DataAnnotations;
@using Shared.Class
@inject NavigationManager Navigation
@using System.Net.Http
@inject HttpClient Http
@using ChartJs.Blazor.BarChart
@inject StateMenagement StateMenagement

<PageTitle>Categoria</PageTitle>

<h1><i class="bi bi-card-list"></i> Categoria</h1>
<hr />

<div class="container-fluid">
    <div class="row">
        @if (tipocategoria != null)
        {
            @if (categoriaOUT.StatusError == null)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            else
            {
                <div class="col-md-6">
                    <div class="alert alert-primary" role="alert">
                        <div class="box-body">
                            <p>Categoria richiesta: <b>@descrizione</b> di tipo: <b>@descrizione_tipo</b></p>
                            <p>Valore Medio <b>@media</b>&euro; Percentuale Media sul mese: <b>@mediaperc</b>%</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="box-body">
                        <div class="alert alert-primary" role="alert">
                            Selezeiona la categoria desisderata:
                            <InputSelect id="department" @bind-Value="tipocategoria" @bind-Value:after="ValueChanged" class="form-select" aria-label="Default select example">
                                @foreach (var dept in tipoattOUT.TipoAttivita)
                                {
                                    <option value="@dept.ID">@dept.Tipo</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <hr />
                @if (categoriaOUT.StatusError != null && categoriaOUT.StatusError != "")
                {
                    <div class="col-md-12">
                        <div class="alert alert-warning" role="alert">
                            <p><b>@categoriaOUT.StatusError</b></p>
                        </div>
                    </div>
                }

                @if (categoriaOUT.Categoria != null)
                {
                    <div class="col-md-4">
                        <div class="box-body">
                            <table class="table table-striped">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Mese</th>
                                        <th>Valore &euro;</th>
                                        <th>Valore Medio</th>
                                        <th>% sul Mese</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        _config.Data.Labels.Clear();
                                        _config.Data.Datasets.Clear();
                                        dataset.Clear();
                                        i = 0;
                                    }
                                    @foreach (var categoria in categoriaOUT.Categoria)
                                    {                                      
                                        _config.Data.Labels.Add(categoria.Descrizione);
                                        dataset.Add(Convert.ToInt32(categoria.Valore));
                                        dataset.BackgroundColor = categoria.ColoreHTML.ToString();
                                        <tr>
                                            <td><b><font color="@categoria.ColoreHTML.ToString()">@categoria.Descrizione.ToString()</font></b></td>
                                            <td>@Math.Round((decimal)categoria.Valore, 0)</td>
                                            <td>@Math.Round((decimal)categoria.Media, 0)</td>
                                            <td>@Math.Round((decimal)categoria.PercentualeSulTotale, 0)%</td>
                                        </tr>
                                        i = i + 1;
                                    }
                                    @if (i > 1)
                                    {
                                        _config.Data.Datasets.Add(dataset);
                                    }
                                </tbody>
                            </table>
                            <br />
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="box-body">
                            <Chart Config="_config"></Chart>
                        </div>
                    </div>
                    <br />
                }
            }
        }
        else
        {
            @if (tipoattOUT.Status == "OK")
            {
                <div class="col-md-6">
                    <div class="box-body">
                        <div class="alert alert-primary" role="alert">
                            Selezeiona la categoria desisderata:
                            <InputSelect id="department" @bind-Value="tipocategoria" @bind-Value:after="ValueChanged" class="form-select" aria-label="Default select example">
                                <option value="0">Seleziona una categoria</option>
                                @foreach (var dept in tipoattOUT.TipoAttivita)
                                {
                                    <option value="@dept.ID">@dept.Tipo</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>
<hr />
<Bottom></Bottom>

@code {
    public HttpClient httpClient = new HttpClient();

    private CategoriaOUT categoriaOUT { get; set; } = new CategoriaOUT();
    public TipoAttivitaOUT tipoattOUT = new TipoAttivitaOUT();

    [Parameter]
    public int? tipocategoria { get; set; } = null;

    public decimal? media { get; set; } = 0;
    public decimal? mediaperc { get; set; } = 0;
    public string? descrizione { get; set; } = "";
    public string? descrizione_tipo { get; set; } = "";

    public BarConfig _config;

    public int i { get; set; } = 0;

    public BarDataset<int> dataset = new BarDataset<int>();
    public string[]? chart_color_assey = new string[10000];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Attivita/TipoAttivitaList");
            response = StateMenagement.JsonNormalized(response);

            tipoattOUT = System.Text.Json.JsonSerializer.Deserialize<TipoAttivitaOUT>(response);      

            _config = new BarConfig
                {
                    Options = new BarOptions
                    {
                        Responsive = true,
                        Legend = new Legend
                        {
                            Position = Position.Top,
                            Display = false 
                        },
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Grafico per Categoria"
                        }
                    }
                };

        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }

    private async Task ValueChanged()
    {
        try
        {
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            var response = await httpClient.GetStringAsync(StateMenagement.api_url + "/api/Categoria/" + tipocategoria);
            response = StateMenagement.JsonNormalized(response);

            categoriaOUT = System.Text.Json.JsonSerializer.Deserialize<CategoriaOUT>(response);
            descrizione = categoriaOUT.Categoria.Max(item => item.TipoAttivita.ToString());
            descrizione_tipo = categoriaOUT.Categoria.Max(item => item.Tipologia.ToString());
            media = categoriaOUT.Categoria.Max(item => Convert.ToInt32(item.Media));
            mediaperc = Math.Round(categoriaOUT.Categoria.Average(item => item.PercentualeSulTotale),2);
        }
        catch (Exception e)
        {
            Navigation.NavigateTo("/errore?errdesc=" + e.ToString());
        }
    }
}